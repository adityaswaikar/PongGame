package game;

import java.awt.Graphics;


public class Ship extends Polygon {

	private Point[] inShape;
	private Point inPosition;
	private double inRotation;

	private boolean moveUp, moveDown, rotateDown, rotateUp, move = true;
	private static int step = 5;


	public Ship(Point[] inShape, Point inPosition, double inRotation) {
		super(inShape, inPosition, inRotation);

		this.inShape = getPoints();
		this.inPosition = inPosition;
		this.inRotation = inRotation;

	}


	void paint(Graphics brush) {
		int[] xCoord = new int[inShape.length];
		int[] yCoord = new int[inShape.length];


		for(int i = 0; i < this.inShape.length; i++){
			xCoord[i] = (int)this.inShape[i].getX();
			yCoord[i] = (int)this.inShape[i].getY();
		}


		brush.fillPolygon(xCoord, yCoord, 7);
	}

	public void move() {
		if(move) {
			if(rotateUp) {
				rotate(5);

			} else if(rotateDown) {
				rotate(-5);

			}
			this.inShape = getPoints();
			if(moveUp) {
				if(inPosition.y >= 35) {
					inPosition.y -= step * (Math.sin(Math.toRadians(inRotation)));
					inPosition.x += step * (Math.cos(Math.toRadians(inRotation)));
				}

			} else if (moveDown) {
				if(inPosition.y <= 570) {
					inPosition.y += step * (Math.sin(Math.toRadians(inRotation)));
					inPosition.x += step * (Math.cos(Math.toRadians(inRotation)));
				}
			} else {
				moveOnOff(false);
			}
		}
	}

	public Point[] getShape() {
		return getShape();
	}

	public Point getPosition() {
		return inPosition;
	}

	public double getRotation() {
		return inRotation;
	}

	public void setMove(boolean up, boolean down, boolean rotateDown, boolean rotateUp) {
		moveUp = up;
		moveDown = down;
		this.rotateDown= rotateDown; 
		this.rotateUp = rotateUp; 
	}

	public void moveOnOff(boolean b) {
		move = b;
	}

	public void rotate(double degrees) {
		inRotation += degrees;
	}

	public void stopRotate() {

	}
}
