package game;

/*
CLASS: YourGameNameoids
DESCRIPTION: Extending Game, YourGameName is all in the paint method.
NOTE: This class is the metaphorical "main method" of your program,
      it is your control center.

 */
import java.awt.*;

public class ShipGame extends Game {
	private static final long serialVersionUID = 1L;

	static int counter = 0;


	Ship user;
	Tokens[] tokensGood, tokensBad;
	Obstacle[] obstacles;
	Score score;
	EndGame e;

	
	/**
	 * Creates a new instance of the ship game class. Initializes the game 
	 * window with the title, "ShipGame!" and 1000 x 1000 dimensions. Sets up
	 * the focus for the game using the appropriate methods. Generates a ship
	 * polygon, tokensGood, tokensBad, and obstacles. Creates a new ship object, 
	 * a new instance of the inner class, Score, and a new instance of the inner
	 * class, EndGame. 
	 * Adds KeyListener to the ship to allow for movement through keyboard 
	 * input.
	 */
	public ShipGame() {
		super("ShipGame!",1000,1000);
		this.setFocusable(true);
		this.requestFocus();

		tokensGood = generateTokens();
		tokensBad = generateTokens();
		obstacles = generateObstacle();

		Point [] ship = new Point[7]; 
		ship[0] = new Point(0,0);
		ship[1] = new Point(45,0);
		ship[2] = new Point(0,20);
		ship[3] = new Point(45,20);
		ship[4] = new Point(35,20);
		ship[5] = new Point(35,5);
		ship[6] = new Point(45,5);


		user = new Ship(ship, new Point(15, 485), 0);

		this.addKeyListener(user);
		score = new Score();
		e = new EndGame();

	}

	
	/**
	 * Sets and fills the game window with black. 
	 * Overrides the paint method to render graphics on the game canvas.
	 * Increments the counter variable. 
	 * <p>
	 * If the game is not over: displays the time passed, 
	 * changes and paints the position of user, paints the 
	 * obstacles, tokensGood, and tokensBad, continuously generates new
	 * obstacles and tokens, and updates score based on collisions with obstacles
	 * and tokens. 
	 * <p>
	 * If the game is over: displays a game over screen with the user's score.
	 * 
	 * @param brush a Graphics object that is used to paint the screen and 
	 * elements
	 */
	public void paint(Graphics brush) {
		brush.setColor(Color.black);
		brush.fillRect(0,0,width,height);

		
		counter++;
		e.isGameOver();
		if(!e.getGameOver()) {
			brush.setColor(Color.white);
			brush.drawString("Time passed: " + counter/100,10,10);
			user.move();
			user.paint(brush);
			for(Obstacle o: obstacles) {
				brush.setColor(Color.BLUE);
				o.paint(brush); 

			}

			brush.setColor(Color.white);
			for(Tokens t : tokensGood) {
				t.paint(brush);
			}

			brush.setColor(Color.RED);
			for(Tokens t : tokensBad) {
				t.paint(brush);
			}

			if(counter % 200 == 0) {
				tokensBad = generateTokens();
				
			}
			
			if(counter % 500 == 0) {
				obstacles = generateObstacle();
			}

			if(counter % 400 == 0) {
				tokensGood = generateTokens();
			}


			score.updateScore();
		} else {
			brush.setColor(Color.black);
			brush.fillRect(0,0, width, height);
			brush.setColor(Color.white);
			brush.drawString("Game Over!", 450, 250);
			brush.drawString("Your Score: " + score.getScore(), 445, 350);
		}
	}
	
	/**
	 * Creates a new ShipGame object and repaints it. 
	 * @param args 
	 */

	public static void main (String[] args) {
		ShipGame a = new ShipGame();
		a.repaint();
	}


	/**
	 * Generates a new Point array of length 4 to create a token polygon. 
	 * Creates a new array of Tokens with a random length, and creates a new 
	 * Token at a random x and y position for each element in the array. 
	 * @return an array of Tokens 
	 */
	
	public Tokens[] generateTokens() {
		int randomX, randomY;
		int randomNum = (int) (Math.random() * 10) + 5;

		Point [] tokenPoint = new Point[4];
		tokenPoint[0] = new Point(0,0);
		tokenPoint[1] = new Point(20,0);
		tokenPoint[2] = new Point(20,20);
		tokenPoint[3] = new Point(0, 20);

		Tokens[] things = new Tokens[randomNum];

		for(int i = 0; i < randomNum; i++) {
			randomX = (int) (Math.random() * (900) + 50);
			randomY = (int)(Math.random() * (900) + 50);
			things[i] = new Tokens(tokenPoint, new Point(randomX, randomY), 0);
		}
		return things;
	}
	
	/**
	 * Generates a new Point array of length 4 to create a Obstacle polygon. 
	 * Creates a new array of Obstacle with a random length, and creates a new 
	 * obstacle at a random x and y position for each element in the array. 
	 * @return an array of Obstacle
	 */

	public Obstacle[] generateObstacle() {
		int randomX, randomY;
		int randomNum = (int) (Math.random() * 15) + 5;

		Point [] obstaclePoint = new Point[4];
		obstaclePoint[0] = new Point(0,0);
		obstaclePoint[1] = new Point(10,0);
		obstaclePoint[2] = new Point(10,10);
		obstaclePoint[3] = new Point(0, 10);

		Obstacle[] things = new Obstacle[randomNum];

		for(int i = 0; i < randomNum; i++) {
			randomX = (int) (Math.random() * (900) + 50);
			randomY = (int)(Math.random() * (900) + 50);
			things[i] = new Obstacle(obstaclePoint, new Point(randomX, randomY), 0);
		}

		return things;
	}

	/**
	 * Anonymous inner class which implements the ShipGameInterface.
	 * Provides implementation for collision method. 
	 */
	ShipGameInterface shipGame = new ShipGameInterface() {
		@Override
		/**
		 * Checks if the ship and tokens collide. 
		 * @param s A Ship object 
		 * @param tokens an array of Tokens 
		 * @return true if the ship collides with a token 
		 * @return false if no collision occurs 
		 */
		public boolean collision(Ship s, Tokens[] tokens) {
			for(Tokens t : tokens) {
				for(Point ship : s.getPoints()) {
					if(t.contains(ship)) {
						t.updatePosition();
						return true;
					}
				}
			}
			return false;
		}
	};
	
	
	/**
	 * A lambda expression that uses the ShipGameInterface to check 
	 * for collisions between the ship and tokens. 
	 * @param s A Ship object 
	 * @param tokens an array of Tokens 
	 * @return true if the ship collides with a token 
	 * @return false if no collision occurs 
	 */
	ShipGameInterface collision = (s, tokens) ->{
		for(Tokens t : tokens) {
			for(Point ship : s.getPoints()) {
				if(t.contains(ship)) {
					t.updatePosition();
					return true;
				}
			}
		}
		return false;
	};
	
	/**
	 * Anonymous inner class which implements the ObstacleInterface.
	 * Provides implementation for collideObstacle method. 
	 */
	ObstacleInterface obstacle = new ObstacleInterface() {
		@Override
		/**
		 * Checks if the ship and obstacles collide. 
		 * @param s A Ship object 
		 * @return true if the ship collides with an obstacle 
		 * @return false if no collision occurs 
		 */
		public boolean collideObstacle(Ship s) {
			for(Obstacle o : obstacles) {
				for(Point ship : s.getPoints()) {
					if(o.contains(ship)) {
						return true;
					}
				}
			}
			return false;
		}
	};
	
	/**
	 * A lambda expression that uses the ObstacleInterface to check 
	 * for collisions between the ship and obstacles. 
	 * @param s A Ship object 
	 * @return true if the ship collides with an obstacle 
	 * @return false if no collision occurs 
	 */
	ObstacleInterface obstacleCollision = (s) -> {
		for(Obstacle o : obstacles) {
			for(Point ship : s.getPoints()) {
				if(o.contains(ship)) {
					return true;
				}
			}
		}
		return false;
	};

	/**
	 * An inner class that keeps track of the score. 
	 */
	private class Score {
		private int score = 0;

		/**
		 * Increments the score if the user collides with a good token 
		 * and decrements it if the user collides with a bad token. 
		 */
		public void updateScore() {
			if(collision.collision(user, tokensGood)) {
				score++;
			} else if(collision.collision(user, tokensBad)) {
				score--;
			}
		}
		/**
		 * gets the score and returns it. Sets the score equal to 0 if it 
		 * is negative. 
		 * @return the player's score 
		 */
		public int getScore() {
			if(score < 0) {
				score = 0;
			}

			return score;
		}

	}

	/**
	 * An inner class that keeps track of if the game is over or not. 
	 */
	private class EndGame{
		
		public boolean isGameOver = false;
		
		/**
		 * Default constructor sets the isGameOVer instance variable to false. 
		 */
		public EndGame() {
			isGameOver = false;
		}
		
		/**
		 * The game is over when the user collides with an obstacle or when 
		 * the time elapsed is greater than 30 seconds. 
		 */
		public void isGameOver() {
			if(obstacleCollision.collideObstacle(user)) {
				isGameOver = true;
			} else if(counter/100 > 30){
				isGameOver = true;
			}
		}
		/**
		 * gets the isGameOver instance variable and returns it. 
		 * @return isGameOver 
		 */
		public boolean getGameOver() {
			return isGameOver;
		}
	}

}
